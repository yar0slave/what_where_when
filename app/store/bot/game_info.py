import asyncio
import random
from dataclasses import dataclass

from app.store.bot.registration import Player


@dataclass
class Question:
    text: str
    answer: str


class Statistics:
    def __init__(
        self,
        participants: dict[int, Player | None],
        tg_client,
        chat_id: int
    ):
        self.participants = participants
        self.captain: str | None = None
        self.score_team = 0
        self.score_bot = 0
        self.rounds = 5
        self.current_question: Question | None = None
        self.answering_player: str | None = None
        self.is_accepting_answer = False
        self.discussion_time = 60
        self.tg_client = tg_client
        self.chat_id = chat_id
        self.current_round = 0
        self.round_complete = asyncio.Event()  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—É–Ω–¥–æ–≤
        self.questions = [
            Question(
                "–ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É –ó–µ–º–ª–µ–π –∏ –°–æ–ª–Ω—Ü–µ–º?",
                "–∏"
            ),
            Question(
                "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –ö –∏ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞?",
                "–∫–æ—Ä–∞–±–ª—å"
            ),
            Question(
                "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –∫—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏?",
                "988"
            ),
            Question(
                "–ù–∞–∑–æ–≤–∏—Ç–µ —Å–∞–º—É—é –º–∞–ª–µ–Ω—å–∫—É—é –ø–ª–∞–Ω–µ—Ç—É –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.",
                "–º–µ—Ä–∫—É—Ä–∏–π"
            ),
            Question(
                "–ö–∞–∫–æ–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º Au?",
                "–∑–æ–ª–æ—Ç–æ"
            ),
        ]

    async def get_captain(self) -> str:
        for player in self.participants.values():
            if player.is_captain:
                return player.username
        return "–ö–∞–ø–∏—Ç–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"

    async def start_game(self):
        self.captain = await self.get_captain()
        rules = (
            "üéÆ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ¬´–ß—Ç–æ? –ì–¥–µ? –ö–æ–≥–¥–∞?¬ª:\n\n"
            "1Ô∏è‚É£ –ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 —Ä–∞—É–Ω–¥–æ–≤\n"
            "2Ô∏è‚É£ –í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ –∫–æ–º–∞–Ω–¥–µ –∑–∞–¥–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å\n"
            "3Ô∏è‚É£ –£ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\n"
            "4Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π "
            "/choose @username\n"
            "5Ô∏è‚É£ –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç\n"
            "6Ô∏è‚É£ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç 1 –±–∞–ª–ª\n"
            "7Ô∏è‚É£ –ó–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ "
            "–æ—Ç–≤–µ—Ç–∞ –±–∞–ª–ª –ø–æ–ª—É—á–∞–µ—Ç –±–æ—Ç\n\n"
            f"üëë –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã: @{self.captain}\n"
            f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {self.rounds}"
        )
        await self.tg_client.send_message(self.chat_id, rules)
        await asyncio.sleep(5)
        await self.tg_client.send_message(
            self.chat_id,
            "üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É..."
        )

    async def play_round(self, round_number: int):
        self.round_complete.clear()
        self.current_round = round_number

        if not self.questions:
            await self.tg_client.send_message(
                self.chat_id,
                "‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –¥–æ—Å—Ä–æ—á–Ω–æ."
            )
            self.round_complete.set()
            return False

        self.current_question = random.choice(self.questions)
        self.questions.remove(self.current_question)

        round_announcement = (
            f"üéØ –†–∞—É–Ω–¥ {round_number}\n"
            f"üí≠ –í–æ–ø—Ä–æ—Å: {self.current_question.text}\n\n"
            f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ: {self.discussion_time} —Å–µ–∫—É–Ω–¥"
        )
        await self.tg_client.send_message(self.chat_id, round_announcement)

        await asyncio.sleep(self.discussion_time - 10)
        await self.tg_client.send_message(
            self.chat_id,
            "‚ö†Ô∏è 10 —Å–µ–∫—É–Ω–¥ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!"
        )
        await asyncio.sleep(10)

        await self.tg_client.send_message(
            self.chat_id,
            f"üëë @{self.captain}, "
            f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /choose @username"
        )

        self.is_accepting_answer = False
        self.answering_player = None

        await self.round_complete.wait()
        return True

    async def handle_captain_choice(self, chosen_username: str) -> bool:
        if not self.current_round:
            return False

        chosen_player = next(
            (
                player
                for player in self.participants.values()
                if player.username == chosen_username
            ),
            None
        )

        if not chosen_player:
            await self.tg_client.send_message(
                self.chat_id,
                "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ!"
            )
            return False

        self.answering_player = chosen_username
        self.is_accepting_answer = True

        await self.tg_client.send_message(
            self.chat_id,
            f"üéØ @{chosen_username}, –≤–∞—à –æ—Ç–≤–µ—Ç?"
            f" –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: /answer –≤–∞—à_–æ—Ç–≤–µ—Ç"
        )
        return True

    async def handle_answer(self, username: str, answer: str) -> bool:
        if not self.is_accepting_answer:
            return False

        if username != self.answering_player:
            await self.tg_client.send_message(
                self.chat_id,
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—á–∞—Ç—å!"
            )
            return False

        self.is_accepting_answer = False

        if (answer.lower().strip() ==
                self.current_question.answer.lower().strip()):
            self.score_team += 1
            await self.tg_client.send_message(
                self.chat_id,
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª."
            )
        else:
            self.score_bot += 1
            await self.tg_client.send_message(
                self.chat_id,
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
                f" –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.current_question.answer}"
            )

        await self.tg_client.send_message(
            self.chat_id,
            f"üìä –°—á–µ—Ç: –ö–æ–º–∞–Ω–¥–∞ {self.score_team} - {self.score_bot} –ë–æ—Ç"
        )

        self.round_complete.set()
        return True

    async def finish_game(self):
        final_message = "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n"

        if self.score_team > self.score_bot:
            final_message += (
                "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–æ–º–∞–Ω–¥–∞ –∑–Ω–∞—Ç–æ–∫–æ–≤ –ø–æ–±–µ–¥–∏–ª–∞!\n"
                f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.score_team} - {self.score_bot}"
            )
        elif self.score_team < self.score_bot:
            final_message += (
                "üòî –ö–æ–º–∞–Ω–¥–∞ –∑–Ω–∞—Ç–æ–∫–æ–≤ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞.\n"
                f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.score_team} - {self.score_bot}"
            )
        else:
            final_message += (
                "ü§ù –ù–∏—á—å—è! –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!\n"
                f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.score_team} - {self.score_bot}"
            )

        await self.tg_client.send_message(self.chat_id, final_message)
